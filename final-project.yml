Description: >
  Maaruf Dauda /
  Final Project Server Infrastructure

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  LaunchTemplateVersion:
    Description: Version number for the launch template
    Type: String
    Default: 1
  ImageId:
    Description: AMI image id for the servers
    Type: String
    Default: ami-0d70546e43a941d70
  JumpboxImageId:
    Description: AMI image id for the jumpbox server
    Type: String
    Default: ami-0cff7528ff583bf9a
  S3Bucket:
    Description: S3 bucket containing at least the index.html file to deploy
    Type: String
    Default: udagram-47

Resources: 
  RootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  RolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "root"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action:
              - "s3:*"
              - "s3-object-lambda:*"
            Resource: "*"
      Roles: 
        - Ref: "RootRole"
  S3InstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - Ref: "RootRole"
  
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access

  # ProfileWithRolesForOurApp:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties: 
  #     Roles:
  #       - UdacityS3ReadOnlyEC2

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LoadBalancerSecGroup
      GroupDescription: Allow http to the load balancer
      VpcId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Desc
          Value: "Allow ingress and egress on http"
        - Key: SSM
          Value: '{{resolve:ssm:test}}'
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebServerSecGroup
      GroupDescription: Allow http to our hosts and SSH from anywhere
      VpcId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Desc
          Value: SSH and privacy group
  WebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref S3InstanceProfile
      ImageId: !Ref ImageId
      KeyName: private_server
      InstanceType: t2.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
      SecurityGroups:
        - !Ref WebServerSecGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install apache2 -y
          sudo apt install awscli -y
          sudo systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://${S3Bucket} ./ --recursive
  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
         - Fn::ImportValue: 
            !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName: !Ref WebServerLaunchConfig
      MaxSize: 6
      MinSize: 4
      TargetGroupARNs:
      - Ref: WebServerTargetGroup
  WebServerLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebServerTargetGroup
      LoadBalancerArn:
        Ref: WebServerLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebServerTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  JumpBoxServer: 
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref JumpboxImageId
      KeyName: mac_m1
      Tags:
      - Key: Name
        Value: JumpboxServer
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - Ref: "WebServerSecGroup"
          SubnetId: 
            Fn::ImportValue:
              Fn::Sub: ${EnvironmentName}-PUB1-SN
      # UserData:
      #   Fn::Base64: !Sub |
      #     #!/bin/bash
      #     sudo apt-get update -y
      #     sudo apt-get install apache2 -y
      #     sudo systemctl start apache2.service
      #     cd /var/www/html
      #     echo "Udacity Demo Web Server Up and Running!" > index.html
  # UdacityS3ReadOnlyEC2:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: UdacityS3ReadOnlyEC2
  #     # Path:
  #     AssumeRolePolicyDocument: 
  #     Policies:
  #       - 
  #        PolicyName: "root"
  #        PolicyDocument:
  #          Version: "2012-10-17"
  #          Statement:
  #             - 
  #               Effect: "Allow"
  #               Action: "*"
  #               Resource: "*"
Outputs: 
  WebServerLB:
    Description: Load balancer DNS
    Value: !GetAtt WebServerLB.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-Server-DNS

# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
#Here it is:
#
#          #!/bin/bash
#          apt-get update -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          echo "Udacity Demo Web Server Up and Running!" > index.html
